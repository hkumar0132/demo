//Semi colon not compulsory(should be writtenonly when you are writing the code in one single line)
function doWhile() {
    message = "Himanshu"
    console.log(message);
}

var m = "Hello World";
console.log("m = " + m);
doWhile();

/*
Data types ->
var, const, let
undefined, null, symbol, string, boolean, number and object
*/

//Single line comment

/**
 Multi line comment
 */

//Global access
var h = 8

//Limited access
let l = 8

//Cannot be changed
const pi = 3.14

var x;
console.log(x);
x = 28
console.log(x); 
x--;
console.log(x);

//Case sensitive
//camelCase
//Shorthand 

console.log("sum = " + 10+10); //String addition
console.log("sum = " + (10+10)); //Integer addition
console.log("minus = " + (10-10)); //10-10 invalid, bracket compulsory
console.log("product = " + 10.2*8.0);
console.log("divison = " + 10/3.4);
console.log("remainder = " + 10.0%3);



name = "I am a \"double quoted string\" inside a \'single quoted string\'";
console.log(name);

myName = 'I am a "double quoted string" inside a "double quoted string"';
console.log(myName);

console.log("Escape sequences: ");
console.log("My name is \\Himanshu");
console.log("My name is \rHimanshu");
console.log("My\tname\tis\tHimanshu");
console.log("My name is\t\bHimanshu");
console.log("My name is\nHimanshu");

var x = "Himanshu";
console.log(x.length);
console.log(x[0]);
console.log(x[2]);
console.log(x[x.length-1]);

//Strings are immutable

function madlib(noun, adj, verb, adverb) {
    var results = "";
    results = "The " + adj + " " + noun + " went to the " + verb + " to buy patties";
    return results;
}

console.log(madlib("dog", "went", "x", "idk"));

var firstArray = ["Himanshu", 1, 8.9, true];
console.log(firstArray);
console.log(firstArray[firstArray.length-1]);
var secondArray = [["Himanshu", 1, [3.4, true, false]], [true, "x", false, "Kumar"]];
console.log(secondArray);
console.log(secondArray[1][3]);
secondArray[1][3] = "Gupta";
console.log(secondArray);

firstArray.push("Himanshu Kumar"); //Appends at the end
firstArray.push(["Himanshu", "Kumar"]);
console.log(firstArray);

firstArray.pop()
console.log(firstArray);

secondArray.pop();
secondArray.pop();
console.log(secondArray);

firstArray.shift(); //Removes the first element
console.log(firstArray); 

firstArray.unshift("Himanshu"); //Adds element to the begining
console.log(firstArray);



var x = 20;

function fun1() {
    y = 25; //This is also a global variable because of absence of var keyword
    var n = 34; //Only visible inside fun1()
}

function fun2() {
    x = 30; //Local variable has higher precedence than global variable
            //so it will be printed in the output
    var output = "";
    if(typeof x != "undefined")
        output += x;
    if(typeof y != "undefined")
        output += y;
    if(typeof n != "undefined")
        output += n;
    console.log(output);
    console.log(x);
}

fun1();
fun2();

function queue(arr, item) {
    arr.push(item);
}

var arr = [1, 2, 3, 4, 5];

console.log("Before : " + JSON.stringify(arr)); //Just a way to convert array into string
queue(arr, 6);
console.log("After : " + JSON.stringify(arr));

console.log(typeof 12);
console.log(typeof "12");

if(12 == "12") //It's true because string is type casted to number before conversion
    console.log("Equality"); 

if(12 === "12") //It's false because string does not get converted
    console.log("Strict equality");

if(12 != "12")
    console.log("Inequality");
else 
    console.log("Inequality is false");

if(12 !== "12")
    console.log("Strict inequality");

//Logical AND &&
//Logical OR ||
//if-else-if
//Switch case

function math(a, b) {

    if(a < 0 || b < 0)
        return;

    return(Math.pow(Math.sqrt(a) - Math.sqrt(b), 2));
}

console.log(math(-2, 2));

//Object Creation

var x = {
    "name" : "Himanshu",
    "age" : 19,
    "college" : "ICFAI",
    "major" : "CSE",
    1 : 3,
    "friends" : ["A", "B", "C", "D"]
}

console.log(x.name);
console.log(x["age"]);
console.log(x["college"]);
console.log(x.major);
console.log(x[1]);
console.log(x.friends);

x.name = "Himanshu Kumar";
x["name"] = "Himanshu Gupta";
console.log(x["name"]);

x.friends[0] = "a";
console.log(x["friends"]);

x.girlfriend_count = 0;
console.log(x.girlfriend_count);

delete x.age;
console.log(x.age); //No longer exists

if(x.hasOwnProperty("hello")) 
    console.log(x.hello);
else    
    console.log("Not Found");

if(x.hasOwnProperty("name")) 
    console.log(x.name);
else    
    console.log("Not Found");


//Array of complex objects (eg : JSON)

arr = [
    {
        "name" : "Himanshu",
        age : 19, //Double quotes not compulsory
        "birth_year" : 2000,
        "college" : "ICFAI",
        "friends" : [
            "A",
            "B",
            "C"
        ],
        "poor" : true,
        'wanna_get_rich' : true, //Single quotes allowed too
        "hard_working" : false
    },
    {
        "artist" : "Linkin Park",
        "title" : "In the end",
        "listening_count" : "Uncountable"
    }
]

console.log(arr);
console.log(arr[0]);
console.log(arr[0].name);
console.log(arr[1].artist);
console.log(arr[0]["friends"][0]); 
console.log(arr[0].friends[0]);
//Nested objects

var person = {
    outside : {
        "inside" : {
            "more_inside" : {
                "most_inside" : "Nothing's here",
                "most_inside_too" : "go back "
            }
        }
    },    
}

console.log(person.outside);
console.log(person.outside.inside);
console.log(person.outside.inside.more_inside);
console.log(person.outside.inside.more_inside.most_inside);
console.log(person.outside.inside.more_inside.most_inside_too);

//Question

var collection = {
    "1234" : {
        artist : "Linkin Park",
        album : "In the end",
        tracks : [
            "L-1",
            "L-2",
            "L-3"
        ]
    },
    "1235" : {
        artist : "Eminem",
        album : "Rap God",
        tracks : [
            "E-1",
            "E-2",
            "E-3"
       ]
    },
    "1236" : {
        artist : "Marshmallow",
        album : "I did it",
        tracks : [
            "M-1",
            "M-2",
            "M-3"
        ]
    },
    "1237" : {
        "album" : "ABBBBBBAAA Gold"
    }
};

copyCollection = JSON.parse(JSON.stringify(collection));

function updateRecords(id, property, value) {
    if(value === "")
        delete collection[id][property];
    else if(property === "tracks") {
        collection[id][property] = collection[id][property] || []; //It means tracks = tracks || []
        collection[id][property].push(value); //Because tracks is an array
    }
    else 
        collection[id][property] = value;

    return collection;
}

console.log(updateRecords("1237", "artist", "ABBA"));
console.log(updateRecords("1234", "tracks", "test"));
console.log(updateRecords("1234", "tracks", ""));
console.log(updateRecords("1237", "album", "Rihana"));


var arr = [];
for(var i = 0; i < 10; i++)
    arr.push(i);

console.log(arr);

var sum = 0;
for(i = 0; i < arr.length; i++)
    sum += arr[i];

console.log(sum);

var arr1 = [];
var i = 0;

while(i < 10) {
    arr1.push(i);
    i++;
}

console.log(arr1);

nested_arr = [[1, 2], [3, 4, 5], [6, 7, 8, 9]];
sum = 0;
for(var i = 0; i < nested_arr.length; i++)
    for(var j = 0; j < nested_arr[i].length; j++)
        sum += nested_arr[i][j];

console.log(sum);

var i = 0;
do {
    i++;
    console.log(i);
} while(i <= 10);

var profile = [
    {
        "firstName" : "Himanshu",
        "lastName" : "Kumar",
        "Number" : "6204738645",
        "likes" : ["Basketball", "Coding", "Movies", "TV Series"]
    },
    {
        "firstName" : "Vishal",
        "lastName" : "Dadlani",
        "Number" : "9116842609",
        "likes" : ["Singing", "Dancing", "Movies"]
    },
    {
        "firstName" : "Anshu",
        "lastName" : "Kumar",
        "Number" : "9223455465",
        "likes" : ["Basketball", "Social Media", "Movies"]
    },
];

function lookup(name, prop) {

    for(var i = 0; i < profile.length; i++) 
        if(name === profile[i]["firstName"]) 
            return profile[i][prop] || "This property does not exists";

    return "Name not in list";
}

console.log(lookup("Anshu", "likes"));
console.log(lookup("Himanshu", "Number"));
console.log(lookup("Himanshu", "*"));
console.log(lookup("H", "likes"));

//Random numbers between 0 and 1
console.log(Math.random());

//Between [1, 9] both included
console.log(Math.floor(Math.random()*10));

//Between x and y
var x = 5, y = 15  //(5, 15) both excluded
console.log(Math.floor(Math.random()*Math.abs(x-y)+1) + Math.min(x, y));


//parseInt function

console.log(parseInt("123232"));//converted into decimal
console.log(parseInt("101", 2));//converted into decimal from binary
console.log(parseInt("799", 16));//converted into decimal from hexadecimal

"use strict";
//It is used to catch coding mistakes during program writing time!
//It can be used at the top of the code or at the begining of function body

//Ternary operators

var x = 19;

console.log(x > 0 ? (x %2 == 0 ? "Positive Even" : "Positive Odd") : (x%2 == 0 ? "Negative even" : "Negative odd"));

//var allows you to declare one variable with the same name twice

//let does not allow you to declare one variable with the same name twice
//But both types of variables can be assigned multiple times
//hence let is used more

var x = 20;
var x = 19;
let y = 30;
// let y; -> Not allowed
x = y = 17;

//Another difference between var and let

console.log("For var : ");
function check() {
    var i = 0;
    if(true) {
        i = 9;
        console.log("Block scope: " + i);
    }
    console.log("Function scope: " + i);
}

check();
//Here we are not able to identify the difference because of old version of js
//But for versions begining with ES6 -> 
//let gives output 9 inside if block and 0 inside the function block

console.log("For let : ");
function checkAgain() {
    let i = 0;
    if(true) {
        i = 9;
        console.log("Block scope: " + i);
    }
    console.log("Function scope: " + i); 
}

checkAgain();

const PI = 3.14; //declared in uppercase
// PI = 3.142; //Not allowed!

const arr = [1, 2, 3, 4, 5, 6];
// arr = [1, 2, 3]; //Not allowed

arr[0] = 2;
console.log(arr);

const MATH_CONSTANTS = {
    PI : 3.14
};  

//The below code changes the value of a const variable
//To prevent this we use Object.freeze

function change()  {
    Object.freeze(MATH_CONSTANTS);
    console.log(MATH_CONSTANTS.PI);
    try {
        MATH_CONSTANTS.PI = 3.142;
    } catch(ex) {
        console.log(ex);    
    }
    console.log(MATH_CONSTANTS.PI);
}

change();


//Annonymous functions using => arrow 
function add(a, b) {
    return a+b;
}

console.log(add(5, 10));

//Better way
var add = (a, b) => a+b;
console.log(add(5, 10));

var final_array = (arr1, arr2) => arr1.concat(arr2);
console.log(final_array([1, 2, 3], [4, 5, 6]));

var even_odd = (num) => num%2 == 0 ? "Even" : "Odd";
console.log(even_odd(21));

var prime_checker = (num) => {
    for(var i = 2; i <= Math.sqrt(num); i++) 
        if(num%i == 0)
            return false;
    return true;
}

console.log(prime_checker(23));


const arr = [0, 1.2, -1.2, 3.4, -45, 5, -9, 7, 29, 30];

//Filter and map function
const squared = (arr) => {
    var new_arr =  arr.filter(num => Number.isInteger(num) && num > 0).map(x => x*x);
    var new__arr = arr.filter(num => Number.isFinite(num) && num > 0).map(x => x*x);
    console.log(new__arr);
    return new_arr;
}

console.log(squared(arr));

//Variable number of arguments

var rev = (...args) => {
    return args.reverse();
}

console.log(rev(34, 45, 67, "Himanshuuuuuuuuuuu", "Aeeeeeeeeeeeeeeeeeeeeeeeeeeee"));//Returns reversed list

//Program to filter -ve even numbers
var fn = (...args)  => {
    return args.filter(num => num%2 == 0 && num < 0);
}

console.log(fn(-20, -34, 90, 20, 34, -981, -98));

//Class
class Student {
    constructor(name, id, branch) {
        this.name = name;
        this.id = id;
        this.branch = branch;
    }
}

s = new Student("Himanshu Kumar", 17, "CSE"); //Object of the class
console.log(s);
console.log(s.name + "\t" + s.id + "\t" + s.branch);


//Importing functions from other files -> Works in ES module 
import {capitalize} from "./Cod1" //Capitalize in other file Cod1 -> export var capitalize = (s) => s.toUpperCase();
console.log(capitalize("hello"));

//Importing everything from other files
// import * from "capitalize"













